CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

FILE(GLOB_RECURSE HEADER_FILES Include/*.h)
FILE(GLOB_RECURSE SOURCE_FILES Source/*.*)

LIST(REMOVE_AT HEADER_FILES config.h)
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.in ${CMAKE_CURRENT_SOURCE_DIR}/Include/config.h)

INCLUDE_DIRECTORIES(
	${FRE_DEV_COMMON_DIR}
	${FRE_MATH_DIRS}
	${CMAKE_CURRENT_SOURCE_DIR}/Include)
  
ADD_DEFINITIONS(-D_FRE4_EXPORTS)
ADD_DEFINITIONS(-D_USE_MATH_DEFINES)

ADD_LIBRARY(${ENGINE_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES})

INSTALL(TARGETS ${ENGINE_NAME} DESTINATION "C:\\Temp\\FRE_INSTALL")

FILE(GLOB COMMON_FILES ${FRE_DEV_COMMON_DIR}/*.*)
INSTALL(FILES ${HEADER_FILES} ${COMMON_FILES} DESTINATION "C:\\Temp\\FRE_INSTALL\\Include")


FILE(READ Include/FreRDMethods.def RDMethods)

STRING(REGEX REPLACE "\n" ";" RD_METHODS "${RDMethods}")

FUNCTION(GET_SUBSTRING STR BEGIN END OUT)
	SET(POS_BEGIN -1)
	SET(POS_END -1)
	STRING(FIND ${STR} ${BEGIN} POS_BEGIN)
	STRING(FIND ${STR} ${END} POS_END REVERSE)
	MATH(EXPR LENGTH "${POS_END} - ${POS_BEGIN} - 1")
	MATH(EXPR POS_BEGIN "${POS_BEGIN} + 1")
		
	STRING(SUBSTRING ${STR} ${POS_BEGIN} ${LENGTH} OUT_RES)
	SET(${OUT} ${OUT_RES} PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(PARSE_STR_FUNC IN_STR OUT_RETURN OUT_NAME)
	STRING(FIND ${IN_STR} " " POS_1)
	STRING(SUBSTRING ${IN_STR} 0 ${POS_1} STR_RETURN)
	STRING(STRIP ${STR_RETURN} STR_RETURN)
	SET(${OUT_RETURN} ${STR_RETURN} PARENT_SCOPE)
	
	STRING(FIND ${IN_STR} "(" POS_2)
	MATH(EXPR LENGTH_2 "${POS_2} - ${POS_1} - 1")
	STRING(SUBSTRING ${IN_STR} ${POS_1} ${LENGTH_2} STR_NAME)
	STRING(STRIP ${STR_NAME} STR_NAME)
	SET(${OUT_NAME} ${STR_NAME} PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(REMOVE_STR IN_STR BEGIN END OUT_STR)
	STRING(LENGTH ${IN_STR} LENGTH)
	STRING(SUBSTRING ${IN_STR} 0 ${BEGIN} FIRST_STR)
	MATH(EXPR LENGTH_2 "${LENGTH} - ${END} - 1")
	STRING(SUBSTRING ${IN_STR} ${END} ${LENGTH_2} SECOND_STR)
	STRING(CONCAT RES ${FIRST_STR} ${SECOND_STR})
	SET(${OUT_STR} ${RES} PARENT_SCOPE)
ENDFUNCTION()

FOREACH(STR ${RD_METHODS})
    SET(POS_STR -1)
	STRING(FIND ${STR} "DEFS_RD_FUNC" POS_STR)

	IF (NOT ${POS_STR} EQUAL -1)
		GET_SUBSTRING(${STR} "(" ")" FUNC)
		MESSAGE(${FUNC})
		PARSE_STR_FUNC(${FUNC} F_RETURN F_NAME)
		MESSAGE(${F_RETURN})
		MESSAGE(${F_NAME})
		
		GET_SUBSTRING(${FUNC} "(" ")" STR_PARAMS)
	MESSAGE(${STR_PARAMS})
		STRING(REGEX REPLACE "," ";" STR_PARAMS "${STR_PARAMS}")
				
				
		SET(PPP)
				
		FOREACH(p ${STR_PARAMS})
			STRING(STRIP ${p} p)
			STRING(FIND ${p} " " POS_3 REVERSE)
			STRING(SUBSTRING ${p} 0 ${POS_3} TYPE_NAME)
			STRING(LENGTH ${p} LEN)
			MATH(EXPR LEN "${LEN} - ${POS_3}")
			STRING(SUBSTRING ${p} ${POS_3} ${LEN} PARAM_NAME)
			
			#MESSAGE(${TYPE_NAME} " -- " ${PARAM_NAME})
			
			SET(PPP "${PPP},${PARAM_NAME}")
		ENDFOREACH()
		
		REMOVE_STR(${PPP} 0 1 PPP)
				
		MESSAGE(${PPP})
#		list(LENGTH F_TYPES COUNT_PARAMS)
		#MESSAGE(${COUNT_PARAMS})
		#FOREACH(i RANGE 1 ${COUNT_PARAMS})
			#MESSAGE(${i})
		#	list(GET F_TYPES i P_TYPE)
		#	list(GET F_PARAM_NAMES i P_NAME)
		#	MESSAGE(${P_TYPE} " -- " ${F_PARAM_NAMES})
		#ENDFOREACH()
	ENDIF()
	
ENDFOREACH()


